{"remainingRequest":"/Users/kiyoungtack/Desktop/boiler/node_modules/babel-loader/lib/index.js??ruleSet[1].rules[0].use[1]!/Users/kiyoungtack/Desktop/boiler/src/lib/token.ts","dependencies":[{"path":"/Users/kiyoungtack/Desktop/boiler/src/lib/token.ts","mtime":1610807802395},{"path":"/Users/kiyoungtack/Desktop/boiler/.babelrc","mtime":1610697389559},{"path":"/Users/kiyoungtack/Desktop/boiler/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kiyoungtack/Desktop/boiler/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8gY29uc3Qgand0U2VjcmV0ID0gcHJvY2Vzcy5lbnYuSldUX1NFQ1JFVDsKLy8gY29uc3Qgand0ID0gcmVxdWlyZSgnanNvbndlYnRva2VuJyk7Ci8vIC8qKgovLyAgKiBKV1Qg7Yag7YGwIOyDneyEsQovLyAgKiBAcGFyYW0ge2FueX0gcGF5bG9hZCAKLy8gICogQHJldHVybnMge3N0cmluZ30gdG9rZW4KLy8gICovCi8vIGZ1bmN0aW9uIGdlbmVyYXRlVG9rZW4ocGF5bG9hZDogeyBfaWQ6IGFueTsgcHJvZmlsZTogYW55OyB9KSB7Ci8vICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gewovLyAgICAgICAgIGp3dC5zaWduKAovLyAgICAgICAgICAgICBwYXlsb2FkLAovLyAgICAgICAgICAgICBqd3RTZWNyZXQsCi8vICAgICAgICAgICAgIHsKLy8gICAgICAgICAgICAgICAgIGV4cGlyZXNJbjogJzdkJyAvLyDthqDtgbAg7Jyg7Zqo6riw6rCEIDfsnbwg7ISk7KCVCi8vICAgICAgICAgICAgIH0sIChlcnJvcjogYW55LCB0b2tlbjogdW5rbm93bikgPT4gewovLyAgICAgICAgICAgICAgICAgaWYgKGVycm9yKSByZWplY3QoZXJyb3IpOwovLyAgICAgICAgICAgICAgICAgcmVzb2x2ZSh0b2tlbik7Ci8vICAgICAgICAgICAgIH0KLy8gICAgICAgICApOwovLyAgICAgfQovLyAgICAgKTsKLy8gfTsKLy8gZnVuY3Rpb24gZGVjb2RlVG9rZW4odG9rZW46IGFueSkgewovLyAgICAgcmV0dXJuIG5ldyBQcm9taXNlKAovLyAgICAgICAgIChyZXNvbHZlLCByZWplY3QpID0+IHsKLy8gICAgICAgICAgICAgand0LnZlcmlmeSh0b2tlbiwgand0U2VjcmV0LCAoZXJyb3I6IGFueSwgZGVjb2RlZDogdW5rbm93bikgPT4gewovLyAgICAgICAgICAgICAgICAgaWYoZXJyb3IpIHJlamVjdChlcnJvcik7Ci8vICAgICAgICAgICAgICAgICByZXNvbHZlKGRlY29kZWQpOwovLyAgICAgICAgICAgICB9KTsKLy8gICAgICAgICB9Ci8vICAgICApOwovLyB9Ci8vIGV4cG9ydHMuand0TWlkZGxld2FyZSA9IGFzeW5jIChjdHg6IHsKLy8gICAgICAgICBjb29raWVzOiB7Ci8vICAgICAgICAgICAgIGdldDogKGFyZzA6IHN0cmluZykgPT4gYW55OyBzZXQ6IChhcmcwOiBzdHJpbmcsIGFyZzE6IHVua25vd24sIGFyZzI6IHsKLy8gICAgICAgICAgICAgICAgIG1heEFnZTogbnVtYmVyOyAvLyA3ZGF5cwovLyAgICAgICAgICAgICAgICAgaHR0cE9ubHk6IGJvb2xlYW47Ci8vICAgICAgICAgICAgIH0pID0+IHZvaWQ7Ci8vICAgICAgICAgfTsgcmVxdWVzdDogeyB1c2VyOiB1bmtub3duOyB9OwovLyAgICAgfSwgbmV4dDogKCkgPT4gYW55KSA9PiB7Ci8vICAgICBjb25zdCB0b2tlbiA9IGN0eC5jb29raWVzLmdldCgnYWNjZXNzX3Rva2VuJyk7IC8vIGN0eCDsl5DshJwgYWNjZXNzX3Rva2VuIOydhCDsnb3slrTsmLXri4jri6QKLy8gICAgIGlmKCF0b2tlbikgcmV0dXJuIG5leHQoKTsgLy8g7Yag7YGw7J20IOyXhuycvOuptCDrsJTroZwg64uk7J2MIOyekeyXheydhCDsp4Ttlontlanri4jri6QuCi8vICAgICB0cnkgewovLyAgICAgICAgIGNvbnN0IGRlY29kZWQgPSBhd2FpdCBkZWNvZGVUb2tlbih0b2tlbik7IC8vIO2GoO2BsOydhCDrlJTsvZTrlKkg7ZWp64uI64ukCi8vICAgICAgICAgLy8g7Yag7YGwIOunjOujjOydvOydtCDtlZjro6jrsJbsl5Ag7JWI64Ko7Jy866m0IO2GoO2BsOydhCDsnqzrsJzquIntlanri4jri6QKLy8gICAgICAgICBpZihEYXRlLm5vdygpIC8gMTAwMCAtIGRlY29kZWQuaWF0ID4gNjAgKiA2MCAqIDI0KSB7Ci8vICAgICAgICAgICAgIC8vIO2VmOujqOqwgCDsp4DrgpjrqbQg6rCx7Iug7ZW07KSA64ukLgovLyAgICAgICAgICAgICBjb25zdCB7IF9pZCwgcHJvZmlsZSB9ID0gZGVjb2RlZDsKLy8gICAgICAgICAgICAgY29uc3QgZnJlc2hUb2tlbiA9IGF3YWl0IGdlbmVyYXRlVG9rZW4oeyBfaWQsIHByb2ZpbGUgfSwgJ2FjY291bnQnKTsKLy8gICAgICAgICAgICAgY3R4LmNvb2tpZXMuc2V0KCdhY2Nlc3NfdG9rZW4nLCBmcmVzaFRva2VuLCB7Ci8vICAgICAgICAgICAgICAgICBtYXhBZ2U6IDEwMDAgKiA2MCAqIDYwICogMjQgKiA3LCAvLyA3ZGF5cwovLyAgICAgICAgICAgICAgICAgaHR0cE9ubHk6IHRydWUKLy8gICAgICAgICAgICAgfSk7Ci8vICAgICAgICAgfQovLyAgICAgICAgIC8vIGN0eC5yZXF1ZXN0LnVzZXIg7JeQIOuUlOy9lOuUqeuQnCDqsJLsnYQg64Sj7Ja07KSN64uI64ukCi8vICAgICAgICAgY3R4LnJlcXVlc3QudXNlciA9IGRlY29kZWQ7Ci8vICAgICB9IGNhdGNoIChlKSB7Ci8vICAgICAgICAgLy8gdG9rZW4gdmFsaWRhdGUg7Iuk7YyoCi8vICAgICAgICAgY3R4LnJlcXVlc3QudXNlciA9IG51bGw7Ci8vICAgICB9Ci8vICAgICByZXR1cm4gbmV4dCgpOwovLyB9OwovLyBleHBvcnRzLmdlbmVyYXRlVG9rZW4gPSBnZW5lcmF0ZVRva2VuOw=="},{"version":3,"sources":["/Users/kiyoungtack/Desktop/boiler/src/lib/token.ts"],"names":[],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA","sourcesContent":["// const jwtSecret = process.env.JWT_SECRET;\n// const jwt = require('jsonwebtoken');\n\n// /**\n//  * JWT 토큰 생성\n//  * @param {any} payload \n//  * @returns {string} token\n//  */\n// function generateToken(payload: { _id: any; profile: any; }) {\n//     return new Promise((resolve, reject) => {\n//         jwt.sign(\n//             payload,\n//             jwtSecret,\n//             {\n//                 expiresIn: '7d' // 토큰 유효기간 7일 설정\n//             }, (error: any, token: unknown) => {\n//                 if (error) reject(error);\n//                 resolve(token);\n//             }\n//         );\n//     }\n//     );\n// };\n\n// function decodeToken(token: any) {\n//     return new Promise(\n//         (resolve, reject) => {\n//             jwt.verify(token, jwtSecret, (error: any, decoded: unknown) => {\n//                 if(error) reject(error);\n//                 resolve(decoded);\n//             });\n//         }\n//     );\n// }\n\n// exports.jwtMiddleware = async (ctx: {\n//         cookies: {\n//             get: (arg0: string) => any; set: (arg0: string, arg1: unknown, arg2: {\n//                 maxAge: number; // 7days\n//                 httpOnly: boolean;\n//             }) => void;\n//         }; request: { user: unknown; };\n//     }, next: () => any) => {\n//     const token = ctx.cookies.get('access_token'); // ctx 에서 access_token 을 읽어옵니다\n//     if(!token) return next(); // 토큰이 없으면 바로 다음 작업을 진행합니다.\n\n//     try {\n//         const decoded = await decodeToken(token); // 토큰을 디코딩 합니다\n\n//         // 토큰 만료일이 하루밖에 안남으면 토큰을 재발급합니다\n//         if(Date.now() / 1000 - decoded.iat > 60 * 60 * 24) {\n//             // 하루가 지나면 갱신해준다.\n//             const { _id, profile } = decoded;\n//             const freshToken = await generateToken({ _id, profile }, 'account');\n//             ctx.cookies.set('access_token', freshToken, {\n//                 maxAge: 1000 * 60 * 60 * 24 * 7, // 7days\n//                 httpOnly: true\n//             });\n//         }\n\n//         // ctx.request.user 에 디코딩된 값을 넣어줍니다\n//         ctx.request.user = decoded;\n//     } catch (e) {\n//         // token validate 실패\n//         ctx.request.user = null;\n//     }\n\n//     return next();\n// };\n\n// exports.generateToken = generateToken;"]}]}