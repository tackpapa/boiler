{"remainingRequest":"/Users/kiyoungtack/Desktop/boiler/node_modules/babel-loader/lib/index.js??ruleSet[1].rules[0].use[1]!/Users/kiyoungtack/Desktop/boiler/src/app.js","dependencies":[{"path":"/Users/kiyoungtack/Desktop/boiler/src/app.js","mtime":1611434563060},{"path":"/Users/kiyoungtack/Desktop/boiler/.babelrc","mtime":1610697389559},{"path":"/Users/kiyoungtack/Desktop/boiler/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kiyoungtack/Desktop/boiler/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Y29uc3QgS29hID0gcmVxdWlyZSgnS29hJyk7Cgpjb25zdCBib2R5UGFyc2VyID0gcmVxdWlyZSgna29hLWJvZHknKTsKCmNvbnN0IGtvYUNvcnMgPSByZXF1aXJlKCdrb2EtY29ycycpOwoKY29uc3Qga29hSGVsbWV0ID0gcmVxdWlyZSgna29hLWhlbG1ldCcpOwoKaW1wb3J0IHJvdXRlciBmcm9tICcuL3JvdXRlci9yb3V0ZSc7Cgpjb25zdCBkb3RlbnYgPSByZXF1aXJlKCdkb3RlbnYnKTsKCmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnOwppbXBvcnQgeyBqd3RQYXJzZXIgfSBmcm9tICd1dGlscy9qd3QnOwppbXBvcnQgc29ja2V0IGZyb20gJy4vc29ja2V0JzsKaW1wb3J0IGh0dHAgZnJvbSAnaHR0cCc7CmRvdGVudi5jb25maWcoewogIHBhdGg6IHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCBgLmVudi4ke3Byb2Nlc3MuZW52Lk5PREVfRU5WfWApCn0pOwpjb25zdCBhcHAgPSBuZXcgS29hKCk7CmFwcC51c2Uoand0UGFyc2VyKS51c2UoYm9keVBhcnNlcih7CiAgbXVsdGlwYXJ0OiB0cnVlLAogIGZvcm1pZGFibGU6IHRydWUKfSkpLnVzZShyb3V0ZXIuYWxsb3dlZE1ldGhvZHMoKSkudXNlKGtvYUhlbG1ldCgpKS51c2Uoa29hQ29ycygpKS51c2Uocm91dGVyLnJvdXRlcygpKTsKYXBwLmxpc3Rlbihwcm9jZXNzLmVudi5QT1JULCBMaXN0ZW5pbmcpOwoKZnVuY3Rpb24gTGlzdGVuaW5nKCkgewogIGNvbnNvbGUubG9nKGDimaXvuI/imaXvuI/imaXvuI/imaXvuI/imaXvuI8gIGxpc3RlbmluZyBub3cgYXQgcG9ydGAsIHByb2Nlc3MuZW52LlBPUlQpOwp9IC8vIGNvbnN0IHNlcnZlciA9IGh0dHAuY3JlYXRlU2VydmVyKGFwcC5jYWxsYmFjaygpKTsKLy8gc29ja2V0KHNlcnZlcik7Ci8vIHNlcnZlci5saXN0ZW4ocHJvY2Vzcy5lbnYuUE9SVCk7Ci8vIOyxhO2MheyEuOyFmCwg64W47Yuw7ZS87LyA7J207IWY7YG06528LCDslrTrk5zrr7wg66Gc6re47J24LCDrqr3qs6DroIjtlIzrpqzsubTshKTsoJUg66eI7Iqk7YSwIOyKrOugiOydtOu4jCwg66Gc6re47JWE7JuD66Gc7KeBLCDshLjshZgg66Gc6re47JWE7JuDIOuTseuTsQ=="},{"version":3,"sources":["/Users/kiyoungtack/Desktop/boiler/src/app.js"],"names":["Koa","require","bodyParser","koaCors","koaHelmet","router","dotenv","path","jwtParser","socket","http","config","join","process","cwd","env","NODE_ENV","app","use","multipart","formidable","allowedMethods","routes","listen","PORT","Listening","console","log"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAnB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,UAAD,CAA1B;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAC,YAAD,CAAzB;;AACA,OAAOI,MAAP,MAAmB,gBAAnB;;AACA,MAAMC,MAAM,GAAGL,OAAO,CAAC,QAAD,CAAtB;;AACA,OAAOM,IAAP,MAAiB,MAAjB;AACA,SAASC,SAAT,QAA0B,WAA1B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEAJ,MAAM,CAACK,MAAP,CAAc;AACZJ,EAAAA,IAAI,EAAEA,IAAI,CAACK,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAA0B,QAAOD,OAAO,CAACE,GAAR,CAAYC,QAAS,EAAtD;AADM,CAAd;AAIA,MAAMC,GAAG,GAAG,IAAIjB,GAAJ,EAAZ;AAEAiB,GAAG,CACAC,GADH,CACOV,SADP,EAEGU,GAFH,CAEOhB,UAAU,CAAC;AAAEiB,EAAAA,SAAS,EAAE,IAAb;AAAmBC,EAAAA,UAAU,EAAE;AAA/B,CAAD,CAFjB,EAGGF,GAHH,CAGOb,MAAM,CAACgB,cAAP,EAHP,EAIGH,GAJH,CAIOd,SAAS,EAJhB,EAKGc,GALH,CAKOf,OAAO,EALd,EAMGe,GANH,CAMOb,MAAM,CAACiB,MAAP,EANP;AAQAL,GAAG,CAACM,MAAJ,CAAWV,OAAO,CAACE,GAAR,CAAYS,IAAvB,EAA6BC,SAA7B;;AACA,SAASA,SAAT,GAAqB;AACnBC,EAAAA,OAAO,CAACC,GAAR,CAAa,mCAAb,EAAiDd,OAAO,CAACE,GAAR,CAAYS,IAA7D;AACD,C,CACD;AACA;AACA;AAEA","sourcesContent":["const Koa = require('Koa');\nconst bodyParser = require('koa-body');\nconst koaCors = require('koa-cors');\nconst koaHelmet = require('koa-helmet');\nimport router from './router/route';\nconst dotenv = require('dotenv');\nimport path from 'path';\nimport { jwtParser } from 'utils/jwt';\nimport socket from './socket';\nimport http from 'http';\n\ndotenv.config({\n  path: path.join(process.cwd(), `.env.${process.env.NODE_ENV}`),\n});\n\nconst app = new Koa();\n\napp\n  .use(jwtParser)\n  .use(bodyParser({ multipart: true, formidable: true }))\n  .use(router.allowedMethods())\n  .use(koaHelmet())\n  .use(koaCors())\n  .use(router.routes());\n\napp.listen(process.env.PORT, Listening);\nfunction Listening() {\n  console.log(`♥️♥️♥️♥️♥️  listening now at port`, process.env.PORT);\n}\n// const server = http.createServer(app.callback());\n// socket(server);\n// server.listen(process.env.PORT);\n\n// 채팅세션, 노티피케이션클라, 어드민 로그인, 몽고레플리카설정 마스터 슬레이브, 로그아웃로직, 세션 로그아웃 등등\n"]}]}