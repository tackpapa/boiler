{"remainingRequest":"/Users/kiyoungtack/Desktop/boiler/node_modules/babel-loader/lib/index.js??ruleSet[1].rules[0].use[1]!/Users/kiyoungtack/Desktop/boiler/src/utils/jwt.ts","dependencies":[{"path":"/Users/kiyoungtack/Desktop/boiler/src/utils/jwt.ts","mtime":1610951495080},{"path":"/Users/kiyoungtack/Desktop/boiler/.babelrc","mtime":1610697389559},{"path":"/Users/kiyoungtack/Desktop/boiler/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kiyoungtack/Desktop/boiler/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IGp3dCBmcm9tICdqc29ud2VidG9rZW4nOwpjb25zdCBvcHRpb24gPSB7CiAgZXhwaXJlc0luOiAnN2QnCn07Cgpjb25zdCBnZW5lcmF0ZVRva2VuID0gcGF5bG9hZCA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7CiAgand0LnNpZ24ocGF5bG9hZCwgcHJvY2Vzcy5lbnYuSldUX1NFQ1JFVCwgb3B0aW9uLCAoZXJyb3IsIHRva2VuKSA9PiB7CiAgICBpZiAoZXJyb3IgfHwgIXRva2VuKSB7CiAgICAgIHJlamVjdChlcnJvcik7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICByZXNvbHZlKHRva2VuKTsKICB9KTsKfSk7CgpleHBvcnQgY29uc3QgZGVjb2RlSldUID0gdG9rZW4gPT4gand0LnZlcmlmeSh0b2tlbiwgcHJvY2Vzcy5lbnYuSldUX1NFQ1JFVCk7CmV4cG9ydCBjb25zdCByZXF1aXJlQXV0aCA9IChjdHgsIG5leHQpID0+IHsKICBpZiAoIWN0eC5zdGF0ZS51c2VyKSB7CiAgICBjdHguYm9keSA9ICdVbmF1dGhvcml6ZWQgZ28gbG9naW4nOwogICAgY3R4LnN0YXR1cyA9IDQwMTsKICAgIHJldHVybiBudWxsOwogIH0KCiAgcmV0dXJuIG5leHQoKTsKfTsKZXhwb3J0IGNvbnN0IGp3dFBhcnNlciA9IGFzeW5jIChjdHgsIG5leHQpID0+IHsKICBjb25zdCB0b2tlbiA9IGN0eC5oZWFkZXIuYXV0aG9yaXphdGlvbjsKCiAgaWYgKHRva2VuKSB7CiAgICBjb25zdCB1c2VyID0gZGVjb2RlSldUKHRva2VuLnJlcGxhY2UoL15CZWFyZXIgLywgJycpKTsKICAgIGN0eC5zdGF0ZS51c2VyID0gdXNlcjsgLy8gY29uc3Qgc2Vzc2lvbiA9IGF3YWl0IGRiLlNlc3Npb24uZmluZE9uZSh7CiAgICAvLyAgIHVzZXJJZDogdXNlci5faWQsCiAgICAvLyB9KTsKICAgIC8vIGlmIChzZXNzaW9uKSB7CiAgICAvLyAgIGN0eC5zdGF0ZS5zb2NrZXRJZCA9IHNlc3Npb24uY29ubmVjdGlvbklkOwogICAgLy8gfQogIH0KCiAgYXdhaXQgbmV4dCgpOwp9OwpleHBvcnQgZGVmYXVsdCBnZW5lcmF0ZVRva2VuOw=="},{"version":3,"sources":["/Users/kiyoungtack/Desktop/boiler/src/utils/jwt.ts"],"names":["jwt","option","expiresIn","generateToken","payload","Promise","resolve","reject","sign","process","env","JWT_SECRET","error","token","decodeJWT","verify","requireAuth","ctx","next","state","user","body","status","jwtParser","header","authorization","replace"],"mappings":"AACA,OAAOA,GAAP,MAAgB,cAAhB;AAQA,MAAMC,MAAM,GAAG;AACbC,EAAAA,SAAS,EAAE;AADE,CAAf;;AAIA,MAAMC,aAAa,GAAIC,OAAD,IACpB,IAAIC,OAAJ,CAAoB,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvCP,EAAAA,GAAG,CAACQ,IAAJ,CAASJ,OAAT,EAAkBK,OAAO,CAACC,GAAR,CAAYC,UAA9B,EAA2CV,MAA3C,EAAmD,CAACW,KAAD,EAAQC,KAAR,KAAkB;AACnE,QAAID,KAAK,IAAI,CAACC,KAAd,EAAqB;AACnBN,MAAAA,MAAM,CAACK,KAAD,CAAN;AACA;AACD;;AACDN,IAAAA,OAAO,CAACO,KAAD,CAAP;AACD,GAND;AAOD,CARD,CADF;;AAWA,OAAO,MAAMC,SAAS,GAAID,KAAD,IACvBb,GAAG,CAACe,MAAJ,CAAWF,KAAX,EAAkBJ,OAAO,CAACC,GAAR,CAAYC,UAA9B,CADK;AAGP,OAAO,MAAMK,WAAW,GAAG,CAACC,GAAD,EAAeC,IAAf,KAAoC;AAC7D,MAAI,CAACD,GAAG,CAACE,KAAJ,CAAUC,IAAf,EAAqB;AACnBH,IAAAA,GAAG,CAACI,IAAJ,GAAW,uBAAX;AACAJ,IAAAA,GAAG,CAACK,MAAJ,GAAa,GAAb;AACA,WAAO,IAAP;AACD;;AACD,SAAOJ,IAAI,EAAX;AACD,CAPM;AAQP,OAAO,MAAMK,SAAS,GAAG,OAAON,GAAP,EAAqBC,IAArB,KAAkD;AACzE,QAAML,KAAK,GAAGI,GAAG,CAACO,MAAJ,CAAWC,aAAzB;;AACA,MAAIZ,KAAJ,EAAW;AACT,UAAMO,IAAI,GAAGN,SAAS,CAACD,KAAK,CAACa,OAAN,CAAc,UAAd,EAA0B,EAA1B,CAAD,CAAtB;AACAT,IAAAA,GAAG,CAACE,KAAJ,CAAUC,IAAV,GAAiBA,IAAjB,CAFS,CAGT;AACA;AACA;AACA;AACA;AACA;AACD;;AACD,QAAMF,IAAI,EAAV;AACD,CAbM;AAeP,eAAef,aAAf","sourcesContent":["import { Context } from 'koa';\nimport jwt from 'jsonwebtoken';\nimport mongoose from 'mongoose';\n\nexport interface JWT {\n  _id: mongoose.Types.ObjectId;\n  email: string;\n}\n\nconst option = {\n  expiresIn: '7d',\n};\n\nconst generateToken = (payload: JWT) =>\n  new Promise<string>((resolve, reject) => {\n    jwt.sign(payload, process.env.JWT_SECRET!, option, (error, token) => {\n      if (error || !token) {\n        reject(error);\n        return;\n      }\n      resolve(token);\n    });\n  });\n\nexport const decodeJWT = (token: string) =>\n  jwt.verify(token, process.env.JWT_SECRET!) as JWT;\n\nexport const requireAuth = (ctx: Context, next: () => void) => {\n  if (!ctx.state.user) {\n    ctx.body = 'Unauthorized go login';\n    ctx.status = 401;\n    return null;\n  }\n  return next();\n};\nexport const jwtParser = async (ctx: Context, next: () => Promise<any>) => {\n  const token = ctx.header.authorization;\n  if (token) {\n    const user = decodeJWT(token.replace(/^Bearer /, ''));\n    ctx.state.user = user;\n    // const session = await db.Session.findOne({\n    //   userId: user._id,\n    // });\n    // if (session) {\n    //   ctx.state.socketId = session.connectionId;\n    // }\n  }\n  await next();\n};\n\nexport default generateToken;\n"]}]}