{"remainingRequest":"/Users/kiyoungtack/Desktop/boiler/node_modules/babel-loader/lib/index.js??ruleSet[1].rules[0].use[1]!/Users/kiyoungtack/Desktop/boiler/src/controllers/postController.ts","dependencies":[{"path":"/Users/kiyoungtack/Desktop/boiler/src/controllers/postController.ts","mtime":1611242175785},{"path":"/Users/kiyoungtack/Desktop/boiler/.babelrc","mtime":1610697389559},{"path":"/Users/kiyoungtack/Desktop/boiler/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kiyoungtack/Desktop/boiler/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IGRiIGZyb20gJ2RiJzsKaW1wb3J0IHVwbG9hZCBmcm9tICcuLi91dGlscy9zMyc7CmltcG9ydCBmcyBmcm9tICdmcyc7Cgpjb25zdCB2aWV3Q291bnQgPSBhc3luYyBpZCA9PiB7CiAgY29uc3Qgdmlld1VwID0gYXdhaXQgZGIucG9zdHMuZmluZEJ5SWRBbmRVcGRhdGUoewogICAgX2lkOiBpZAogIH0sIHsKICAgICRpbmM6IHsKICAgICAgdmlld3M6ICsxCiAgICB9CiAgfSk7CiAgYXdhaXQgdmlld1VwPy5zYXZlKCk7Cn07Cgpjb25zdCBjcmVhdGUgPSBhc3luYyBjdHggPT4gewogIGNvbnN0IHsKICAgIHRpdGxlLAogICAgY29udGV4dCwKICAgIHRhZ3MsCiAgICBpc2pvYiwKICAgIGxvY2F0aW9uCiAgfSA9IGN0eC5yZXF1ZXN0LmJvZHk7CiAgY29uc3QgYXV0aG9yID0gY3R4LnN0YXRlLnVzZXIuX2lkOwogIGNvbnN0IG5ld3RhZyA9IEpTT04ucGFyc2UodGFncyk7CiAgY29uc3QgaXRlbSA9IGF3YWl0IGRiLnBvc3RzLmNyZWF0ZSh7CiAgICB0aXRsZSwKICAgIGNvbnRleHQsCiAgICBhdXRob3IsCiAgICB0YWdzOiBuZXd0YWcsCiAgICBpc2pvYiwKICAgIGxvY2F0aW9uCiAgfSk7CiAgdmFyIGFyciA9IFtdOyAvLyBpZiAoY3R4LnJlcXVlc3QuZmlsZXMucGljLnBhdGgpIHsKICAvLyAgIGFyci5wdXNoKGN0eC5yZXF1ZXN0LmZpbGVzLnBpYy5wYXRoKTsKICAvLyB9CiAgLy8gaWYgKGN0eC5yZXF1ZXN0LmZpbGVzLnBpYzIucGF0aCkgewogIC8vICAgYXJyLnB1c2goY3R4LnJlcXVlc3QuZmlsZXMucGljMi5wYXRoKTsKICAvLyB9CiAgLy8gaWYgKGN0eC5yZXF1ZXN0LmZpbGVzLnBpYzMucGF0aCkgewogIC8vICAgYXJyLnB1c2goY3R4LnJlcXVlc3QuZmlsZXMucGljMy5wYXRoKTsKICAvLyB9CgogIHZhciBhcnIgPSBbY3R4LnJlcXVlc3QuZmlsZXMucGljLnBhdGgsIGN0eC5yZXF1ZXN0LmZpbGVzLnBpYzIucGF0aF07CgogIGZvciAodmFyIHZhbCBvZiBhcnIpIHsKICAgIHZhciBwYXJhbSA9IHsKICAgICAgQnVja2V0OiAncmlkYXNwcm9kJywKICAgICAgS2V5OiBgcG9zdGltYWdlLyR7aXRlbS5faWQgKyBNYXRoLnJhbmRvbSgpfWAsCiAgICAgIEFDTDogJ3B1YmxpYy1yZWFkJywKICAgICAgQm9keTogYXdhaXQgZnMuY3JlYXRlUmVhZFN0cmVhbSh2YWwpLAogICAgICBDb250ZW50VHlwZTogJ2ltYWdlL3BuZycKICAgIH07CiAgICBjb25zdCBsYWxhID0gYXdhaXQgdXBsb2FkKHBhcmFtKTsKICAgIGF3YWl0IGl0ZW0ucGljcy5wdXNoKGxhbGEuTG9jYXRpb24pOwogIH0KCiAgaXRlbS5zYXZlKCk7CiAgY29uc29sZS5sb2coJ2l0ZW0nLCBpdGVtKTsKICBjdHguc3RhdHVzID0gMjAwOwp9OwoKY29uc3QgdXBkYXRlID0gYXN5bmMgY3R4ID0+IHsKICBjb25zdCB7CiAgICBpZAogIH0gPSBjdHgucGFyYW1zOwogIGNvbnN0IHsKICAgIGNvbnRleHQsCiAgICB0aXRsZSwKICAgIHRhZ3MsCiAgICBpc2pvYiwKICAgIGxvY2F0aW9uCiAgfSA9IGN0eC5yZXF1ZXN0LmJvZHk7CiAgY29uc3QgbmV3dGFnID0gSlNPTi5wYXJzZSh0YWdzKTsKICBjb25zdCBhdXRob3IgPSBjdHguc3RhdGUudXNlci5faWQ7CiAgY29uc3QgcG9zdCA9IGF3YWl0IGRiLnBvc3RzLmZpbmRPbmVBbmRVcGRhdGUoewogICAgX2lkOiBpZAogIH0sIHsKICAgIGNvbnRleHQ6IGNvbnRleHQsCiAgICB0YWdzOiBuZXd0YWcsCiAgICB0aXRsZTogdGl0bGUsCiAgICBpc2pvYjogaXNqb2IsCiAgICBsb2NhdGlvbjogbG9jYXRpb24KICB9KTsKICBwb3N0LnNhdmUoKTsKICBjdHguc3RhdHVzID0gMjAwOwp9OwoKY29uc3QgZmluZG9uZSA9IGFzeW5jIGN0eCA9PiB7CiAgY29uc3QgewogICAgaWQKICB9ID0gY3R4LnBhcmFtczsKICBjb25zdCBwb3N0ID0gYXdhaXQgZGIucG9zdHMuZmluZE9uZSh7CiAgICBfaWQ6IGlkCiAgfSk7CiAgdmlld0NvdW50KGlkKTsKICBjdHguc3RhdHVzID0gMjAwOwogIGN0eC5ib2R5ID0gcG9zdDsKfTsKCmNvbnN0IGxhdGVzdCA9IGFzeW5jIGN0eCA9PiB7CiAgY29uc3QgcG9zdHMgPSBhd2FpdCBkYi5wb3N0cy5maW5kKCkuc29ydCh7CiAgICBfaWQ6IC0xCiAgfSkubGltaXQoMjApOwogIGN0eC5zdGF0dXMgPSAyMDA7CiAgY3R4LmJvZHkgPSBwb3N0czsKfTsKCmNvbnN0IGRlbGV0ZW9uZSA9IGFzeW5jIGN0eCA9PiB7CiAgY29uc3QgewogICAgaWQKICB9ID0gY3R4LnBhcmFtczsKICBjb25zdCBwb3N0ID0gYXdhaXQgZGIucG9zdHMuZmluZE9uZUFuZFJlbW92ZSh7CiAgICBfaWQ6IGlkCiAgfSk7CiAgY3R4LnN0YXR1cyA9IDIwMDsKfTsKCmV4cG9ydCBkZWZhdWx0IHsKICBjcmVhdGUsCiAgZGVsZXRlb25lLAogIHVwZGF0ZSwKICBmaW5kb25lLAogIGxhdGVzdAp9Ow=="},{"version":3,"sources":["/Users/kiyoungtack/Desktop/boiler/src/controllers/postController.ts"],"names":["db","upload","fs","viewCount","id","viewUp","posts","findByIdAndUpdate","_id","$inc","views","save","create","ctx","title","context","tags","isjob","location","request","body","author","state","user","newtag","JSON","parse","item","arr","files","pic","path","pic2","val","param","Bucket","Key","Math","random","ACL","Body","createReadStream","ContentType","lala","pics","push","Location","console","log","status","update","params","post","findOneAndUpdate","findone","findOne","latest","find","sort","limit","deleteone","findOneAndRemove"],"mappings":"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","sourcesContent":["import db from 'db';\nimport { Controller } from './types';\nimport upload from '../utils/s3';\nimport fs from 'fs';\nimport { isNamedExports } from 'typescript';\n\nconst viewCount: Controller = async (id) => {\n  const viewUp = await db.posts.findByIdAndUpdate(\n    { _id: id },\n    { $inc: { views: +1 } }\n  );\n  await viewUp?.save();\n};\n\nconst create: Controller = async (ctx) => {\n  const { title, context, tags, isjob, location } = ctx.request.body;\n  const author = ctx.state.user._id;\n  const newtag = JSON.parse(tags);\n  const item = await db.posts.create({\n    title,\n    context,\n    author,\n    tags: newtag,\n    isjob,\n    location,\n  });\n  var arr = [];\n\n  // if (ctx.request.files.pic.path) {\n  //   arr.push(ctx.request.files.pic.path);\n  // }\n  // if (ctx.request.files.pic2.path) {\n  //   arr.push(ctx.request.files.pic2.path);\n  // }\n  // if (ctx.request.files.pic3.path) {\n  //   arr.push(ctx.request.files.pic3.path);\n  // }\n\n  var arr = [ctx.request.files.pic.path, ctx.request.files.pic2.path];\n  for (var val of arr) {\n    var param = {\n      Bucket: 'ridasprod',\n      Key: `postimage/${item._id + Math.random()}`,\n      ACL: 'public-read',\n      Body: await fs.createReadStream(val),\n      ContentType: 'image/png',\n    };\n    const lala = await upload(param);\n    await (item as any).pics.push(lala.Location);\n  }\n\n  item.save();\n  console.log('item', item);\n  ctx.status = 200;\n};\n\nconst update: Controller = async (ctx) => {\n  const { id } = ctx.params;\n  const { context, title, tags, isjob, location } = ctx.request.body;\n  const newtag = JSON.parse(tags);\n  const author = ctx.state.user._id;\n  const post = await db.posts.findOneAndUpdate(\n    { _id: id },\n    {\n      context: context,\n      tags: newtag,\n      title: title,\n      isjob: isjob,\n      location: location,\n    }\n  );\n  (post as any).save();\n  ctx.status = 200;\n};\n\nconst findone: Controller = async (ctx) => {\n  const { id } = ctx.params;\n  const post = await db.posts.findOne({ _id: id });\n  viewCount(id);\n  ctx.status = 200;\n  ctx.body = post;\n};\n\nconst latest: Controller = async (ctx) => {\n  const posts = await db.posts.find().sort({ _id: -1 }).limit(20);\n  ctx.status = 200;\n  ctx.body = posts;\n};\n\nconst deleteone: Controller = async (ctx) => {\n  const { id } = ctx.params;\n  const post = await db.posts.findOneAndRemove({ _id: id });\n  ctx.status = 200;\n};\n\nexport default { create, deleteone, update, findone, latest };\n"]}]}