{"remainingRequest":"/Users/kiyoungtack/Desktop/ridas/node_modules/babel-loader/lib/index.js??ruleSet[1].rules[0].use[1]!/Users/kiyoungtack/Desktop/ridas/src/controllers/userController.ts","dependencies":[{"path":"/Users/kiyoungtack/Desktop/ridas/src/controllers/userController.ts","mtime":1610807858853},{"path":"/Users/kiyoungtack/Desktop/ridas/.babelrc","mtime":1610697389559},{"path":"/Users/kiyoungtack/Desktop/ridas/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kiyoungtack/Desktop/ridas/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IGRiIGZyb20gJ2RiJzsKCmNvbnN0IGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpOwoKY29uc3QgaGFzaCA9IF9wYXNzd29yZCA9PiB7CiAgcmV0dXJuIGNyeXB0by5jcmVhdGVIYXNoKCdzaGEyNTYnLCBwcm9jZXNzLmVudi5TRUNSRVRfS0VZKS51cGRhdGUoX3Bhc3N3b3JkKS5kaWdlc3QoJ2hleCcpOwp9OwoKY29uc3QgY3JlYXRlID0gYXN5bmMgY3R4ID0+IHsKICBjb25zdCB7CiAgICBlbWFpbCwKICAgIHBhc3N3b3JkCiAgfSA9IGN0eC5yZXF1ZXN0LmJvZHk7CiAgY29uc3QgaGFzaGVkID0gaGFzaChwYXNzd29yZCk7CiAgYXdhaXQgZGIudXNlcnMuY3JlYXRlKHsKICAgIGVtYWlsLAogICAgcGFzc3dvcmQ6IGhhc2hlZAogIH0pOwogIGN0eC5zdGF0dXMgPSAyMDA7CiAgY29uc3QgdXNlcjEgPSBhd2FpdCBkYi51c2Vycy5maW5kT25lKHsKICAgIGVtYWlsCiAgfSkuZXhlYygpOwogIGN0eC5ib2R5ID0gdXNlcjE7CiAgY29uc29sZS5sb2coJ3VzZXIgY3JlYXRlZCcsIHVzZXIxKTsKfTsKCmNvbnN0IGxvZ2luID0gYXN5bmMgY3R4ID0+IHsKICBjb25zdCB7CiAgICBlbWFpbCwKICAgIHBhc3N3b3JkCiAgfSA9IGN0eC5yZXF1ZXN0LmJvZHk7Cn07Cgpjb25zdCB1cGRhdGUgPSBjdHggPT4gewogIGNvbnN0IHsKICAgIGVtYWlsLAogICAgcGFzc3dvcmQKICB9ID0gY3R4LnJlcXVlc3QuYm9keTsKfTsKCmNvbnN0IGRlbGV0ZW9uZSA9IGFzeW5jIGN0eCA9PiB7CiAgY29uc3QgewogICAgZW1haWwsCiAgICBwYXNzd29yZAogIH0gPSBjdHgucmVxdWVzdC5ib2R5Owp9OwoKY29uc3QgZmluZG9uZSA9IGFzeW5jIGN0eCA9PiB7CiAgY29uc3QgewogICAgZW1haWwKICB9ID0gY3R4LnJlcXVlc3QuYm9keTsKICByZXR1cm4gZGIudXNlcnMuZmluZE9uZShlbWFpbCkuZXhlYygpOwp9OwoKY29uc3QgbG9nb3V0ID0gYXN5bmMgY3R4ID0+IHsKICBjb25zdCB7CiAgICBlbWFpbCwKICAgIHBhc3N3b3JkCiAgfSA9IGN0eC5yZXF1ZXN0LmJvZHk7Cn07CgpleHBvcnQgZGVmYXVsdCB7CiAgY3JlYXRlLAogIGxvZ2luLAogIHVwZGF0ZSwKICBkZWxldGVvbmUsCiAgZmluZG9uZSwKICBsb2dvdXQKfTs="},{"version":3,"sources":["/Users/kiyoungtack/Desktop/ridas/src/controllers/userController.ts"],"names":["db","crypto","require","hash","_password","createHash","process","env","SECRET_KEY","update","digest","create","ctx","email","password","request","body","hashed","users","status","user1","findOne","exec","console","log","login","deleteone","findone","logout"],"mappings":"AAAA,OAAOA,EAAP,MAAe,IAAf;;AAEA,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AAIA,MAAMC,IAAe,GAAIC,SAAD,IAAkB;AACtC,SAAOH,MAAM,CAACI,UAAP,CAAkB,QAAlB,EAA4BC,OAAO,CAACC,GAAR,CAAYC,UAAxC,EAAoDC,MAApD,CAA2DL,SAA3D,EAAsEM,MAAtE,CAA6E,KAA7E,CAAP;AACH,CAFD;;AAIA,MAAMC,MAAiB,GAAG,MAAOC,GAAP,IAAe;AACrC,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBF,GAAG,CAACG,OAAJ,CAAYC,IAAxC;AACA,QAAMC,MAAM,GAAGd,IAAI,CAACW,QAAD,CAAnB;AACA,QAAMd,EAAE,CAACkB,KAAH,CAASP,MAAT,CAAgB;AAClBE,IAAAA,KADkB;AAElBC,IAAAA,QAAQ,EAAEG;AAFQ,GAAhB,CAAN;AAIAL,EAAAA,GAAG,CAACO,MAAJ,GAAa,GAAb;AACA,QAAMC,KAAK,GAAI,MAAMpB,EAAE,CAACkB,KAAH,CAASG,OAAT,CAAiB;AAClCR,IAAAA;AADkC,GAAjB,EAElBS,IAFkB,EAArB;AAGAV,EAAAA,GAAG,CAACI,IAAJ,GAAWI,KAAX;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BJ,KAA5B;AAEH,CAdD;;AAgBA,MAAMK,KAAgB,GAAG,MAAOb,GAAP,IAAe;AACpC,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBF,GAAG,CAACG,OAAJ,CAAYC,IAAxC;AAEH,CAHD;;AAKA,MAAMP,MAAiB,GAAIG,GAAD,IAAS;AAC/B,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBF,GAAG,CAACG,OAAJ,CAAYC,IAAxC;AAEH,CAHD;;AAKA,MAAMU,SAAoB,GAAG,MAAOd,GAAP,IAAe;AACxC,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBF,GAAG,CAACG,OAAJ,CAAYC,IAAxC;AAEH,CAHD;;AAKA,MAAMW,OAAkB,GAAI,MAAOf,GAAP,IAAe;AACvC,QAAM;AAAEC,IAAAA;AAAF,MAAYD,GAAG,CAACG,OAAJ,CAAYC,IAA9B;AACA,SAAOhB,EAAE,CAACkB,KAAH,CAASG,OAAT,CAAiBR,KAAjB,EAAwBS,IAAxB,EAAP;AACH,CAHD;;AAKA,MAAMM,MAAiB,GAAG,MAAOhB,GAAP,IAAe;AACrC,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBF,GAAG,CAACG,OAAJ,CAAYC,IAAxC;AAEH,CAHD;;AAKA,eAAe;AAACL,EAAAA,MAAD;AAASc,EAAAA,KAAT;AAAgBhB,EAAAA,MAAhB;AAAwBiB,EAAAA,SAAxB;AAAmCC,EAAAA,OAAnC;AAA4CC,EAAAA;AAA5C,CAAf","sourcesContent":["import db from 'db';\nimport {Controller} from './types'\nconst crypto = require('crypto');\nimport jwt from 'koa-jwt';\nimport Joi from 'koa-joi-router';\n\nconst hash:Controller = (_password: any)=>{\n    return crypto.createHash('sha256', process.env.SECRET_KEY).update(_password).digest('hex');\n}\n\nconst create:Controller = async (ctx) => {\n    const { email, password } = ctx.request.body;\n    const hashed = hash(password);\n    await db.users.create({\n        email,\n        password: hashed\n    })\n    ctx.status = 200;\n    const user1 =  await db.users.findOne({\n        email\n    }).exec();\n    ctx.body = user1;\n    console.log('user created', user1)\n    \n}\n\nconst login:Controller = async (ctx) => {\n    const { email, password } = ctx.request.body;\n\n}\n\nconst update:Controller = (ctx) => {\n    const { email, password } = ctx.request.body;\n\n}\n\nconst deleteone:Controller = async (ctx) => {\n    const { email, password } = ctx.request.body;\n\n}\n\nconst findone:Controller =  async (ctx) => {\n    const { email } = ctx.request.body;\n    return db.users.findOne(email).exec();\n}\n\nconst logout:Controller = async (ctx) => {\n    const { email, password } = ctx.request.body;\n\n}\n\nexport default {create, login, update, deleteone, findone, logout}\n"]}]}