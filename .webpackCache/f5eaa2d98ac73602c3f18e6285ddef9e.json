{"remainingRequest":"/Users/kiyoungtack/Desktop/boiler/node_modules/babel-loader/lib/index.js??ruleSet[1].rules[0].use[1]!/Users/kiyoungtack/Desktop/boiler/src/controllers/userController.ts","dependencies":[{"path":"/Users/kiyoungtack/Desktop/boiler/src/controllers/userController.ts","mtime":1611671737822},{"path":"/Users/kiyoungtack/Desktop/boiler/.babelrc","mtime":1610697389559},{"path":"/Users/kiyoungtack/Desktop/boiler/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kiyoungtack/Desktop/boiler/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IGRiIGZyb20gJ2RiJzsKCmNvbnN0IGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpOwoKaW1wb3J0IHsgSm9pIH0gZnJvbSAna29hLWpvaS1yb3V0ZXInOwppbXBvcnQgZ2VuZXJhdGVUb2tlbiBmcm9tICd1dGlscy9qd3QnOwppbXBvcnQgdXBsb2FkIGZyb20gJy4uL3V0aWxzL3MzJzsKaW1wb3J0IGZzIGZyb20gJ2ZzJzsKCmNvbnN0IGhhc2ggPSBfcGFzc3dvcmQgPT4gewogIHJldHVybiBjcnlwdG8uY3JlYXRlSGFzaCgnc2hhMjU2JywgcHJvY2Vzcy5lbnYuU0VDUkVUX0tFWSkudXBkYXRlKF9wYXNzd29yZCkuZGlnZXN0KCdoZXgnKTsKfTsKCmNvbnN0IGNyZWF0ZSA9IGFzeW5jIGN0eCA9PiB7CiAgY29uc3QgewogICAgZW1haWwsCiAgICBwYXNzd29yZCwKICAgIG5hbWUsCiAgICBjZWxsCiAgfSA9IGN0eC5yZXF1ZXN0LmJvZHk7CiAgdmFyIHBhdHRlcm4gPSAvXFMrQFxTK1wuXFMrLzsKICBjb25zdCBlbWFpbFZhbCA9IHBhdHRlcm4udGVzdChlbWFpbCk7CgogIGlmIChlbWFpbFZhbCA9PT0gZmFsc2UpIHsKICAgIGN0eC5zdGF0dXMgPSA0MDE7CiAgICByZXR1cm47CiAgfQoKICBjb25zdCBoYXNoZWQgPSBoYXNoKHBhc3N3b3JkKTsKICBjb25zdCBtYW4gPSBhd2FpdCBkYi51c2Vycy5maW5kT25lKHsKICAgIGVtYWlsCiAgfSk7CgogIGlmIChtYW4pIHsKICAgIGN0eC5zdGF0dXMgPSA0MDM7CiAgfSBlbHNlIHsKICAgIGF3YWl0IGRiLnVzZXJzLmNyZWF0ZSh7CiAgICAgIGVtYWlsLAogICAgICBwYXNzd29yZDogaGFzaGVkLAogICAgICBuYW1lLAogICAgICBjZWxsCiAgICB9KTsKICAgIGN0eC5zdGF0dXMgPSAyMDA7CiAgICBjb25zdCB1c2VyMSA9IGF3YWl0IGRiLnVzZXJzLmZpbmRPbmUoewogICAgICBlbWFpbAogICAgfSk7CiAgICBjdHguYm9keSA9IHVzZXIxOwogIH0KfTsKCmNvbnN0IGxvZ2luID0gYXN5bmMgY3R4ID0+IHsKICBjb25zdCB7CiAgICBlbWFpbCwKICAgIHBhc3N3b3JkCiAgfSA9IGN0eC5yZXF1ZXN0LmJvZHk7CiAgY29uc3QgaGFzaGVkID0gaGFzaChwYXNzd29yZCk7CiAgY29uc3Qgc2NoZW1hID0gSm9pLm9iamVjdCgpLmtleXMoewogICAgZW1haWw6IEpvaS5zdHJpbmcoKS5lbWFpbCgpLnJlcXVpcmVkKCksCiAgICBwYXNzd29yZDogSm9pLnN0cmluZygpLnJlcXVpcmVkKCkKICB9KTsKICBzY2hlbWEudmFsaWRhdGVBc3luYyh7CiAgICBlbWFpbCwKICAgIHBhc3N3b3JkCiAgfSkudGhlbihyZXN1bHQgPT4gewogICAgY3R4LnJlcXVlc3QuYm9keSA9IHJlc3VsdDsKICB9KS5jYXRjaChlcnIgPT4gewogICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gdmFsaWRhdGUgaW5wdXQgJyArIGVyci5kZXRhaWxzWzBdLm1lc3NhZ2UpOwogIH0pOwogIGxldCB1c2VyID0gbnVsbDsKCiAgdHJ5IHsKICAgIHVzZXIgPSBhd2FpdCBkYi51c2Vycy5maW5kT25lKHsKICAgICAgZW1haWwKICAgIH0pOwogIH0gY2F0Y2ggKGUpIHsKICAgIGN0eC50aHJvdyg1MDAsIGUpOwogIH0KCiAgaWYgKCF1c2VyIHx8IHVzZXIucGFzc3dvcmQgIT09IGAke2hhc2hlZH1gKSB7CiAgICBjdHguc3RhdHVzID0gNDAzOyAvLyBGb3JiaWRkZW4KCiAgICByZXR1cm47CiAgfQoKICBjdHguc3RhdHVzID0gMjAwOwogIGNvbnN0IHRva2VuID0gYXdhaXQgZ2VuZXJhdGVUb2tlbih7CiAgICBfaWQ6IHVzZXIuaWQsCiAgICBlbWFpbDogdXNlci5lbWFpbAogIH0pOwogIGN0eC5ib2R5ID0gdG9rZW47CiAgcmV0dXJuOwp9OwoKY29uc3QgdXBkYXRlID0gYXN5bmMgY3R4ID0+IHsKICBjb25zdCB7CiAgICBlbWFpbCwKICAgIHBhc3N3b3JkLAogICAgbmFtZSwKICAgIGNlbGwsCiAgICBtZW1vCiAgfSA9IGN0eC5yZXF1ZXN0LmJvZHk7CgogIGlmIChwYXNzd29yZCkgewogICAgdmFyIGhhc2hlZCA9IGhhc2gocGFzc3dvcmQpOwogICAgYXdhaXQgZGIudXNlcnMuZmluZE9uZUFuZFVwZGF0ZSh7CiAgICAgIGVtYWlsCiAgICB9LCB7CiAgICAgIHBhc3N3b3JkOiBoYXNoZWQsCiAgICAgIG5hbWUsCiAgICAgIGNlbGwsCiAgICAgIG1lbW8KICAgIH0pOwogIH0gZWxzZSB7CiAgICBhd2FpdCBkYi51c2Vycy5maW5kT25lQW5kVXBkYXRlKHsKICAgICAgZW1haWwKICAgIH0sIHsKICAgICAgbmFtZSwKICAgICAgY2VsbCwKICAgICAgbWVtbwogICAgfSk7CiAgfQoKICBjdHguc3RhdHVzID0gMjAwOwp9OwoKY29uc3QgZGVsZXRlb25lID0gYXN5bmMgY3R4ID0+IHsKICBjb25zdCB7CiAgICBlbWFpbAogIH0gPSBjdHgucmVxdWVzdC5ib2R5OwogIGF3YWl0IGxvZ2luKGN0eCk7CgogIGlmIChjdHguc3RhdHVzID09PSAyMDApIHsKICAgIGRiLnVzZXJzLmRlbGV0ZU9uZSh7CiAgICAgIGVtYWlsCiAgICB9KTsKICAgIGNvbnNvbGUubG9nKGVtYWlsLCAnIHVzZXIgZGVsZXRlZCcpOwogIH0gZWxzZSB7CiAgICBjb25zb2xlLmxvZygndXNlciBhbHJlYWR5IGdvbmUnKTsKICB9Cn07Cgpjb25zdCBmaW5kb25lID0gYXN5bmMgY3R4ID0+IHsKICBjb25zdCB7CiAgICBpZAogIH0gPSBjdHgucGFyYW1zOwogIGNvbnN0IHVzZXIgPSBhd2FpdCBkYi51c2Vycy5maW5kT25lKHsKICAgIF9pZDogaWQKICB9KTsKICBjdHguc3RhdHVzID0gMjAwOwogIGN0eC5ib2R5ID0gdXNlcjsKfTsKCmNvbnN0IHVwbG9hZFByb2ZpbGUgPSBhc3luYyBjdHggPT4gewogIGNvbnN0IHVzZXIgPSBhd2FpdCBkYi51c2Vycy5maW5kT25lKHsKICAgIF9pZDogY3R4LnN0YXRlLnVzZXIuX2lkCiAgfSk7CiAgY29uc3QgewogICAgcGF0aAogIH0gPSBjdHgucmVxdWVzdC5maWxlcy5wcm9maWxlcGljOwogIGNvbnN0IGJvZHkgPSBmcy5jcmVhdGVSZWFkU3RyZWFtKHBhdGgpOwogIGNvbnN0IHBhcmFtID0gewogICAgQnVja2V0OiBwcm9jZXNzLmVudi5wanRfbmFtZSwKICAgIEtleTogYHByb2ZpbGVpbWFnZS8ke3VzZXIuX2lkfWAsCiAgICBBQ0w6ICdwdWJsaWMtcmVhZCcsCiAgICBCb2R5OiBib2R5LAogICAgQ29udGVudFR5cGU6ICdpbWFnZS9wbmcnCiAgfTsKICBjb25zdCB1cCA9IGF3YWl0IHVwbG9hZChwYXJhbSk7CiAgdXNlci5wcm9maWxlcGljID0gdXAuTG9jYXRpb247CiAgdXNlci5zYXZlKCk7CiAgY3R4LnN0YXR1cyA9IDIwMDsKfTsKCmNvbnN0IHVzZXJwcm9maWxlID0gYXN5bmMgY3R4ID0+IHsKICBjb25zdCB1c2VyaWQgPSBjdHguc3RhdGUudXNlci5faWQ7CiAgY29uc3QgcG9zdHMgPSBhd2FpdCBkYi5wb3N0cy5maW5kKHsKICAgIGF1dGhvcjogdXNlcmlkCiAgfSkucG9wdWxhdGUoJ2NvbW1uZXRzJyk7CiAgY29uc3Qgam9icyA9IGF3YWl0IGRiLmpvYnMuZmluZCh7CiAgICBhdXRob3I6IHVzZXJpZAogIH0pLnBvcHVsYXRlKCdjb21tZW50cycpOwogIGNvbnN0IG1hcmtldHMgPSBhd2FpdCBkYi5tYXJrZXRzLmZpbmQoewogICAgYXV0aG9yOiB1c2VyaWQKICB9KS5wb3B1bGF0ZSgnY29tbWVudHMnKTsKICBjb25zdCBjb21tZW50cyA9IGF3YWl0IGRiLmNvbW1lbnRzLmZpbmQoewogICAgYXV0aG9yOiB1c2VyaWQKICB9KS5wb3B1bGF0ZSgnY29tbWVudHMnKTsKICBjdHguc3RhdHVzID0gMjAwOwogIGN0eC5ib2R5ID0gewogICAgcG9zdHMsCiAgICBqb2JzLAogICAgbWFya2V0cywKICAgIGNvbW1lbnRzCiAgfTsKfTsKCmNvbnN0IGxvZ291dCA9IGN0eCA9PiB7CiAgY3R4LnN0YXR1cyA9IDIwMDsKfTsKCmV4cG9ydCBkZWZhdWx0IHsKICBjcmVhdGUsCiAgbG9naW4sCiAgdXBkYXRlLAogIGRlbGV0ZW9uZSwKICBmaW5kb25lLAogIHVzZXJwcm9maWxlLAogIGxvZ291dCwKICB1cGxvYWRQcm9maWxlCn07"},{"version":3,"sources":["/Users/kiyoungtack/Desktop/boiler/src/controllers/userController.ts"],"names":["db","crypto","require","Joi","generateToken","upload","fs","hash","_password","createHash","process","env","SECRET_KEY","update","digest","create","ctx","email","password","name","cell","request","body","pattern","emailVal","test","status","hashed","man","users","findOne","user1","login","schema","object","keys","string","required","validateAsync","then","result","catch","err","Error","details","message","user","e","throw","token","_id","id","memo","findOneAndUpdate","deleteone","deleteOne","console","log","findone","params","uploadProfile","state","path","files","profilepic","createReadStream","param","Bucket","pjt_name","Key","ACL","Body","ContentType","up","Location","save","userprofile","userid","posts","find","author","populate","jobs","markets","comments","logout"],"mappings":"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","sourcesContent":["import db from 'db';\nimport { Controller } from './types';\nconst crypto = require('crypto');\nimport { Joi } from 'koa-joi-router';\nimport generateToken from 'utils/jwt';\nimport upload from '../utils/s3';\nimport fs from 'fs';\n\nconst hash = (_password: any) => {\n  return crypto\n    .createHash('sha256', process.env.SECRET_KEY)\n    .update(_password)\n    .digest('hex');\n};\n\nconst create: Controller = async (ctx) => {\n  const { email, password, name, cell } = ctx.request.body;\n  var pattern = /\\S+@\\S+\\.\\S+/;\n  const emailVal = pattern.test(email);\n  if (emailVal === false) {\n    ctx.status = 401;\n    return;\n  }\n  const hashed = hash(password);\n  const man = await db.users.findOne({ email });\n  if (man) {\n    ctx.status = 403;\n  } else {\n    await db.users.create({\n      email,\n      password: hashed,\n      name,\n      cell,\n    });\n    ctx.status = 200;\n    const user1 = await db.users.findOne({\n      email,\n    });\n    ctx.body = user1;\n  }\n};\n\nconst login: Controller = async (ctx) => {\n  const { email, password } = ctx.request.body;\n  const hashed = hash(password);\n  const schema = Joi.object().keys({\n    email: Joi.string().email().required(),\n    password: Joi.string().required(),\n  });\n  schema\n    .validateAsync({ email, password })\n    .then((result) => {\n      ctx.request.body = result;\n    })\n    .catch((err) => {\n      throw new Error('Failed to validate input ' + err.details[0].message);\n    });\n  let user: any = null;\n  try {\n    user = await db.users.findOne({ email });\n  } catch (e) {\n    ctx.throw(500, e);\n  }\n  if (!user || user.password !== `${hashed}`) {\n    ctx.status = 403; // Forbidden\n    return;\n  }\n  ctx.status = 200;\n  const token = await generateToken({ _id: user.id, email: user.email });\n  ctx.body = token;\n  return;\n};\n\nconst update: Controller = async (ctx) => {\n  const { email, password, name, cell, memo } = ctx.request.body;\n  if (password) {\n    var hashed = hash(password);\n    await db.users.findOneAndUpdate(\n      { email },\n      { password: hashed, name, cell, memo }\n    );\n  } else {\n    await db.users.findOneAndUpdate({ email }, { name, cell, memo });\n  }\n\n  ctx.status = 200;\n};\n\nconst deleteone: Controller = async (ctx) => {\n  const { email } = ctx.request.body;\n  await login(ctx);\n  if (ctx.status === 200) {\n    db.users.deleteOne({ email });\n    console.log(email, ' user deleted');\n  } else {\n    console.log('user already gone');\n  }\n};\n\nconst findone: Controller = async (ctx) => {\n  const { id } = ctx.params;\n  const user = await db.users.findOne({ _id: id });\n  ctx.status = 200;\n  ctx.body = user;\n};\n\nconst uploadProfile: Controller = async (ctx) => {\n  const user: any = await db.users.findOne({ _id: ctx.state.user._id });\n  const { path } = ctx.request.files.profilepic;\n  const body = fs.createReadStream(path);\n  const param = {\n    Bucket: process.env.pjt_name,\n    Key: `profileimage/${user._id}`,\n    ACL: 'public-read',\n    Body: body,\n    ContentType: 'image/png',\n  };\n  const up = await upload(param);\n  (user as any).profilepic = up.Location;\n  user.save();\n  ctx.status = 200;\n};\n\nconst userprofile: Controller = async (ctx) => {\n  const userid = ctx.state.user._id;\n  const posts = await db.posts.find({ author: userid }).populate('commnets');\n  const jobs = await db.jobs.find({ author: userid }).populate('comments');\n  const markets = await db.markets\n    .find({ author: userid })\n    .populate('comments');\n  const comments = await db.comments\n    .find({ author: userid })\n    .populate('comments');\n  ctx.status = 200;\n  ctx.body = { posts, jobs, markets, comments };\n};\n\nconst logout: Controller = (ctx) => {\n  ctx.status = 200;\n};\n\nexport default {\n  create,\n  login,\n  update,\n  deleteone,\n  findone,\n  userprofile,\n  logout,\n  uploadProfile,\n};\n"]}]}