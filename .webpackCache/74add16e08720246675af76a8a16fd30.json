{"remainingRequest":"/Users/kiyoungtack/Desktop/ridas/node_modules/babel-loader/lib/index.js??ruleSet[1].rules[0].use[1]!/Users/kiyoungtack/Desktop/ridas/src/controllers/userController.ts","dependencies":[{"path":"/Users/kiyoungtack/Desktop/ridas/src/controllers/userController.ts","mtime":1610884803904},{"path":"/Users/kiyoungtack/Desktop/ridas/.babelrc","mtime":1610697389559},{"path":"/Users/kiyoungtack/Desktop/ridas/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kiyoungtack/Desktop/ridas/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IGRiIGZyb20gJ2RiJzsKCmNvbnN0IGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpOwoKaW1wb3J0IHsgSm9pIH0gZnJvbSAna29hLWpvaS1yb3V0ZXInOwoKY29uc3QgaGFzaCA9IF9wYXNzd29yZCA9PiB7CiAgcmV0dXJuIGNyeXB0by5jcmVhdGVIYXNoKCdzaGEyNTYnLCBwcm9jZXNzLmVudi5TRUNSRVRfS0VZKS51cGRhdGUoX3Bhc3N3b3JkKS5kaWdlc3QoJ2hleCcpOwp9OwoKY29uc3QgdmFsaWRhdGVQYXNzd29yZCA9IGZ1bmN0aW9uIChwYXNzd29yZCkgewogIGNvbnN0IGhhc2hlZCA9IGhhc2gocGFzc3dvcmQpOwogIHJldHVybiBoYXNoZWQ7Cn07Cgpjb25zdCBjcmVhdGUgPSBhc3luYyBjdHggPT4gewogIGNvbnN0IHsKICAgIGVtYWlsLAogICAgcGFzc3dvcmQsCiAgICBuYW1lLAogICAgY2VsbAogIH0gPSBjdHgucmVxdWVzdC5ib2R5OwogIHZhciBwYXR0ZXJuID0gL1xTK0BcUytcLlxTKy87CiAgY29uc3QgZW1haWxWYWwgPSBwYXR0ZXJuLnRlc3QoZW1haWwpOwoKICBpZiAoZW1haWxWYWwgPT09IGZhbHNlKSB7CiAgICByZXR1cm4gY3R4LnN0YXR1cyA9IDQwMzsKICB9IGVsc2UgewogICAgY29uc3QgaGFzaGVkID0gaGFzaChwYXNzd29yZCk7CiAgICBjb25zdCBtYW4gPSBhd2FpdCBkYi51c2Vycy5maW5kT25lKHsKICAgICAgZW1haWwKICAgIH0pLmV4ZWMoKTsKCiAgICBpZiAobWFuKSB7CiAgICAgIGN0eC5zdGF0dXMgPSA0MDM7CiAgICB9IGVsc2UgewogICAgICBhd2FpdCBkYi51c2Vycy5jcmVhdGUoewogICAgICAgIGVtYWlsLAogICAgICAgIHBhc3N3b3JkOiBoYXNoZWQsCiAgICAgICAgbmFtZSwKICAgICAgICBjZWxsCiAgICAgIH0pOwogICAgICBjdHguc3RhdHVzID0gMjAwOwogICAgICBjb25zdCB1c2VyMSA9IGF3YWl0IGRiLnVzZXJzLmZpbmRPbmUoewogICAgICAgIGVtYWlsCiAgICAgIH0pLmV4ZWMoKTsKICAgICAgY3R4LmJvZHkgPSB1c2VyMTsKICAgICAgY29uc29sZS5sb2coJ3VzZXIgY3JlYXRlZCcsIGN0eC5yZXF1ZXN0LmJvZHkpOwogICAgfQogIH0KfTsKCmNvbnN0IGxvZ2luID0gYXN5bmMgY3R4ID0+IHsKICBjb25zdCB7CiAgICBlbWFpbCwKICAgIHBhc3N3b3JkCiAgfSA9IGN0eC5yZXF1ZXN0LmJvZHk7CiAgY29uc3QgaGFzaGVkID0gaGFzaChwYXNzd29yZCk7CiAgY29uc3Qgc2NoZW1hID0gSm9pLm9iamVjdCgpLmtleXMoewogICAgZW1haWw6IEpvaS5zdHJpbmcoKS5lbWFpbCgpLnJlcXVpcmVkKCksCiAgICBwYXNzd29yZDogSm9pLnN0cmluZygpLnJlcXVpcmVkKCkKICB9KTsKICBzY2hlbWEudmFsaWRhdGVBc3luYyh7CiAgICBlbWFpbCwKICAgIHBhc3N3b3JkCiAgfSkudGhlbihyZXN1bHQgPT4gewogICAgY3R4LnJlcXVlc3QuYm9keSA9IHJlc3VsdDsKICB9KS5jYXRjaChlcnIgPT4gewogICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gdmFsaWRhdGUgaW5wdXQgJyArIGVyci5kZXRhaWxzWzBdLm1lc3NhZ2UpOwogIH0pOwogIGxldCB1c2VyID0gbnVsbDsKCiAgdHJ5IHsKICAgIC8vIOydtOuplOydvOuhnCDqs4TsoJUg7LC+6riwCiAgICB1c2VyID0gYXdhaXQgZGIudXNlcnMuZmluZE9uZSh7CiAgICAgIGVtYWlsCiAgICB9KTsKICB9IGNhdGNoIChlKSB7CiAgICBjdHgudGhyb3coNTAwLCBlKTsKICB9CgogIGlmICghdXNlciB8fCB1c2VyLnBhc3N3b3JkICE9PSBgJHtoYXNoZWR9YCkgewogICAgLy8g7Jyg7KCA6rCAIOyhtOyerO2VmOyngCDslYrqsbDrgpggfHwg67mE67CA67KI7Zi46rCAIOydvOy5mO2VmOyngCDslYrsnLzrqbQKICAgIGN0eC5zdGF0dXMgPSA0MDM7IC8vIEZvcmJpZGRlbgoKICAgIHJldHVybjsKICB9IGVsc2UgewogICAgY3R4LnN0YXR1cyA9IDIwMDsKICAgIGNvbnNvbGUubG9nKCdsb2dnaW5nIGluJywgdXNlci5lbWFpbCk7CiAgICByZXR1cm4gY3R4LnN0YXR1cyA9IDIwMDsKICB9Cn07Cgpjb25zdCB1cGRhdGUgPSBhc3luYyBjdHggPT4gewogIGNvbnN0IHsKICAgIGVtYWlsLAogICAgcGFzc3dvcmQsCiAgICBuYW1lLAogICAgY2VsbAogIH0gPSBjdHgucmVxdWVzdC5ib2R5OwogIGNvbnN0IGhhc2hlZCA9IGhhc2gocGFzc3dvcmQpOwogIGNvbnN0IG1hbiA9IGF3YWl0IGRiLnVzZXJzLmZpbmRPbmVBbmRVcGRhdGUoewogICAgZW1haWwsCiAgICBwYXNzd29yZCwKICAgIG5hbWUsCiAgICBjZWxsCiAgfSkuZXhlYygpOyAvLyBjb25zdCB1cGRhdGVkID0gYXdhaXQgZGIudXNlcnMuZmluZE9uZSh7IGVtYWlsIH0pLmV4ZWMoKTsKICAvLyBjb25zb2xlLmxvZygndXBkYXRlZCcsIHVwZGF0ZWQpOyAg7JeF646D65Cs64qU7KeAIO2ZleyduOyaqSDsvZTrk5wKCiAgY3R4LnN0YXR1cyA9IDIwMDsKfTsKCmNvbnN0IGRlbGV0ZW9uZSA9IGFzeW5jIGN0eCA9PiB7CiAgY29uc3QgewogICAgZW1haWwsCiAgICBwYXNzd29yZAogIH0gPSBjdHgucmVxdWVzdC5ib2R5OwogIGF3YWl0IGxvZ2luKGN0eCk7CgogIGlmIChjdHguc3RhdHVzID09PSAyMDApIHsKICAgIGNvbnN0IGRlbCA9IGRiLnVzZXJzLmRlbGV0ZU9uZSh7CiAgICAgIGVtYWlsCiAgICB9KTsKICAgIGN0eC5zdGF0dXMgPT09IDIwMDsKICAgIGNvbnNvbGUubG9nKGVtYWlsLCAnIHVzZXIgZGVsZXRlZCcpOwogIH0gZWxzZSB7CiAgICBjb25zb2xlLmxvZygndXNlciBhbHJlYWR5IGdvbmUnKTsKICB9Cn07Cgpjb25zdCBmaW5kb25lID0gYXN5bmMgY3R4ID0+IHsKICBjb25zdCB7CiAgICBpZAogIH0gPSBjdHgucGFyYW1zOwogIGNvbnNvbGUubG9nKCfsmpTquLDquYzsp4AnLCBjdHgucGFyYW1zLmlkKTsKICBjb25zdCB1c2VyID0gYXdhaXQgZGIudXNlcnMuZmluZE9uZSh7CiAgICBfaWQ6IGlkCiAgfSk7CiAgY3R4LnN0YXR1cyA9IDIwMDsKICBjdHguYm9keSA9IHVzZXI7Cn07Cgpjb25zdCBsb2dvdXQgPSBhc3luYyBjdHggPT4gewogIGNvbnN0IHsKICAgIGVtYWlsLAogICAgcGFzc3dvcmQKICB9ID0gY3R4LnJlcXVlc3QuYm9keTsKfTsKCmV4cG9ydCBkZWZhdWx0IHsKICBjcmVhdGUsCiAgbG9naW4sCiAgdXBkYXRlLAogIGRlbGV0ZW9uZSwKICBmaW5kb25lLAogIGxvZ291dAp9Ow=="},{"version":3,"sources":["/Users/kiyoungtack/Desktop/ridas/src/controllers/userController.ts"],"names":["db","crypto","require","Joi","hash","_password","createHash","process","env","SECRET_KEY","update","digest","validatePassword","password","hashed","create","ctx","email","name","cell","request","body","pattern","emailVal","test","status","man","users","findOne","exec","user1","console","log","login","schema","object","keys","string","required","validateAsync","then","result","catch","err","Error","details","message","user","e","throw","findOneAndUpdate","deleteone","del","deleteOne","findone","id","params","_id","logout"],"mappings":"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","sourcesContent":["import db from 'db';\nimport { Controller } from './types';\nconst crypto = require('crypto');\nimport jwt from 'koa-jwt';\nimport { Joi } from 'koa-joi-router';\n\nconst hash: Controller = (_password: any) => {\n  return crypto\n    .createHash('sha256', process.env.SECRET_KEY)\n    .update(_password)\n    .digest('hex');\n};\n\nconst validatePassword = function (password: any) {\n  const hashed = hash(password);\n  return hashed;\n};\n\nconst create: Controller = async (ctx) => {\n  const { email, password, name, cell } = ctx.request.body;\n  var pattern = /\\S+@\\S+\\.\\S+/;\n  const emailVal = pattern.test(email);\n  if (emailVal === false) {\n    return (ctx.status = 403);\n  } else {\n    const hashed = hash(password);\n    const man = await db.users.findOne({ email }).exec();\n    if (man) {\n      ctx.status = 403;\n    } else {\n      await db.users.create({\n        email,\n        password: hashed,\n        name,\n        cell,\n      });\n      ctx.status = 200;\n      const user1 = await db.users\n        .findOne({\n          email,\n        })\n        .exec();\n      ctx.body = user1;\n      console.log('user created', ctx.request.body);\n    }\n  }\n};\n\nconst login: Controller = async (ctx) => {\n  const { email, password } = ctx.request.body;\n  const hashed = hash(password);\n  const schema = Joi.object().keys({\n    email: Joi.string().email().required(),\n    password: Joi.string().required(),\n  });\n  schema\n    .validateAsync({ email, password })\n    .then((result) => {\n      ctx.request.body = result;\n    })\n    .catch((err) => {\n      throw new Error('Failed to validate input ' + err.details[0].message);\n    });\n  let user: any = null;\n  try {\n    // 이메일로 계정 찾기\n    user = await db.users.findOne({ email });\n  } catch (e) {\n    ctx.throw(500, e);\n  }\n  if (!user || user.password !== `${hashed}`) {\n    // 유저가 존재하지 않거나 || 비밀번호가 일치하지 않으면\n    ctx.status = 403; // Forbidden\n    return;\n  } else {\n    ctx.status = 200;\n    console.log('logging in', user.email);\n    return (ctx.status = 200);\n  }\n};\n\nconst update: Controller = async (ctx) => {\n  const { email, password, name, cell } = ctx.request.body;\n  const hashed = hash(password);\n  const man = await db.users\n    .findOneAndUpdate({ email, password, name, cell })\n    .exec();\n  // const updated = await db.users.findOne({ email }).exec();\n  // console.log('updated', updated);  업뎃됬는지 확인용 코드\n  ctx.status = 200;\n};\n\nconst deleteone: Controller = async (ctx) => {\n  const { email, password } = ctx.request.body;\n  await login(ctx);\n  if (ctx.status === 200) {\n    const del = db.users.deleteOne({ email });\n    ctx.status === 200;\n    console.log(email, ' user deleted');\n  } else {\n    console.log('user already gone');\n  }\n};\n\nconst findone: Controller = async (ctx) => {\n  const { id } = ctx.params;\n  console.log('요기까지', ctx.params.id);\n  const user = await db.users.findOne({ _id: id });\n  ctx.status = 200;\n  ctx.body = user;\n};\n\nconst logout: Controller = async (ctx) => {\n  const { email, password } = ctx.request.body;\n};\n\nexport default { create, login, update, deleteone, findone, logout };\n"]}]}