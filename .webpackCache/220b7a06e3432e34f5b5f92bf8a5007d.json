{"remainingRequest":"/Users/kiyoungtack/Desktop/boiler/node_modules/babel-loader/lib/index.js??ruleSet[1].rules[0].use[1]!/Users/kiyoungtack/Desktop/boiler/src/controllers/marketController.ts","dependencies":[{"path":"/Users/kiyoungtack/Desktop/boiler/src/controllers/marketController.ts","mtime":1611492237726},{"path":"/Users/kiyoungtack/Desktop/boiler/.babelrc","mtime":1610697389559},{"path":"/Users/kiyoungtack/Desktop/boiler/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kiyoungtack/Desktop/boiler/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IGRiIGZyb20gJ2RiJzsKaW1wb3J0IHVwbG9hZCBmcm9tICcuLi91dGlscy9zMyc7CmltcG9ydCBmcyBmcm9tICdmcyc7Cgpjb25zdCBjcmVhdGUgPSBhc3luYyBjdHggPT4gewogIGNvbnN0IHsKICAgIHRpdGxlLAogICAgY29udGV4dCwKICAgIHRhZ3MsCiAgICBwcmljZQogIH0gPSBjdHgucmVxdWVzdC5ib2R5OwogIGNvbnN0IGF1dGhvciA9IGN0eC5zdGF0ZS51c2VyLl9pZDsKICBjb25zdCB1c2VyID0gYXdhaXQgZGIudXNlcnMuZmluZE9uZUFuZFVwZGF0ZSh7CiAgICBfaWQ6IGF1dGhvcgogIH0sIHsKICAgICRpbmM6IHsKICAgICAgZXhwOiArMTAKICAgIH0KICB9KTsKICB1c2VyPy5zYXZlKCk7CiAgY29uc3QgbmV3dGFnID0gSlNPTi5wYXJzZSh0YWdzKTsKICBjb25zdCBpdGVtID0gYXdhaXQgZGIubWFya2V0cy5jcmVhdGUoewogICAgdGl0bGUsCiAgICBjb250ZXh0LAogICAgYXV0aG9yLAogICAgdGFnczogbmV3dGFnLAogICAgcHJpY2UKICB9KTsKICBjdHgucmVxdWVzdC5maWxlcy5waWMuZm9yRWFjaChhc3luYyAoewogICAgcGF0aAogIH0sIGkpID0+IHsKICAgIHZhciBwYXJhbSA9IHsKICAgICAgQnVja2V0OiAncmlkYXNwcm9kJywKICAgICAgS2V5OiBgbWFya2V0aW1hZ2UvJHtpdGVtLl9pZCArIGl9YCwKICAgICAgQUNMOiAncHVibGljLXJlYWQnLAogICAgICBCb2R5OiBhd2FpdCBmcy5jcmVhdGVSZWFkU3RyZWFtKHBhdGgpLAogICAgICBDb250ZW50VHlwZTogJ2ltYWdlL3BuZycKICAgIH07CiAgICBjb25zdCBsYWxhID0gYXdhaXQgdXBsb2FkKHBhcmFtKTsKICAgIGF3YWl0IGl0ZW0ucGljcy5wdXNoKGxhbGEuTG9jYXRpb24pOwogICAgaXRlbS5zYXZlKCk7CiAgfSk7CiAgY3R4LnN0YXR1cyA9IDIwMDsKfTsKCmNvbnN0IHVwZGF0ZSA9IGFzeW5jIGN0eCA9PiB7CiAgY29uc3QgewogICAgaWQKICB9ID0gY3R4LnBhcmFtczsKICBjb25zdCB7CiAgICBjb250ZXh0LAogICAgdGl0bGUsCiAgICB0YWdzLAogICAgcHJpY2UKICB9ID0gY3R4LnJlcXVlc3QuYm9keTsKICBjb25zdCBuZXd0YWcgPSBKU09OLnBhcnNlKHRhZ3MpOwogIGNvbnN0IGF1dGhvciA9IGN0eC5zdGF0ZS51c2VyLl9pZDsKICBjb25zdCBwb3N0ID0gYXdhaXQgZGIubWFya2V0cy5maW5kT25lQW5kVXBkYXRlKHsKICAgIF9pZDogaWQKICB9LCB7CiAgICBjb250ZXh0OiBjb250ZXh0LAogICAgdGFnczogbmV3dGFnLAogICAgdGl0bGU6IHRpdGxlLAogICAgcHJpY2U6IHByaWNlCiAgfSk7CiAgY3R4LnN0YXR1cyA9IDIwMDsKfTsKCmNvbnN0IGZpbmRvbmUgPSBhc3luYyBjdHggPT4gewogIGNvbnN0IHsKICAgIGlkCiAgfSA9IGN0eC5wYXJhbXM7CiAgY29uc3QgcG9zdCA9IGF3YWl0IGRiLm1hcmtldHMuZmluZE9uZSh7CiAgICBfaWQ6IGlkCiAgfSkucG9wdWxhdGUoJ2NvbW1lbnRzJyk7CiAgcG9zdD8udmlld1VwKCk7CiAgY3R4LnN0YXR1cyA9IDIwMDsKICBjdHguYm9keSA9IHBvc3Q7Cn07Cgpjb25zdCBzZWFyY2ggPSBhc3luYyBjdHggPT4gewogIGNvbnN0IHsKICAgIHF1ZXJ5CiAgfSA9IGN0eC5wYXJhbXM7CiAgY29uc3QgcG9zdCA9IGF3YWl0IGRiLm1hcmtldHMuZmluZCh7CiAgICAkdGV4dDogewogICAgICAkc2VhcmNoOiBxdWVyeQogICAgfQogIH0pOyAvLyBjb25zdCBwb3N0MiA9IGF3YWl0IGRiLnBvc3RzLmZpbmQoeyB0aXRsZTogeyAkaW46IHF1ZXJ5IH0gfSk7CgogIGN0eC5zdGF0dXMgPSAyMDA7CiAgY3R4LmJvZHkgPSBwb3N0Owp9OwoKY29uc3QgbGF0ZXN0ID0gYXN5bmMgY3R4ID0+IHsKICBjb25zdCBwb3N0cyA9IGF3YWl0IGRiLm1hcmtldHMuZmluZCgpLnBvcHVsYXRlKCdjb21tZW50cycpLnNvcnQoewogICAgX2lkOiAtMQogIH0pLmxpbWl0KDIwKTsKICBjdHguc3RhdHVzID0gMjAwOwogIGN0eC5ib2R5ID0gcG9zdHM7Cn07Cgpjb25zdCBkZWxldGVvbmUgPSBhc3luYyBjdHggPT4gewogIGNvbnN0IHsKICAgIGlkCiAgfSA9IGN0eC5wYXJhbXM7CiAgY29uc3QgcG9zdCA9IGF3YWl0IGRiLm1hcmtldHMuZmluZE9uZUFuZFJlbW92ZSh7CiAgICBfaWQ6IGlkCiAgfSk7CiAgY3R4LnN0YXR1cyA9IDIwMDsKfTsKCmV4cG9ydCBkZWZhdWx0IHsKICBjcmVhdGUsCiAgZGVsZXRlb25lLAogIHVwZGF0ZSwKICBzZWFyY2gsCiAgZmluZG9uZSwKICBsYXRlc3QKfTs="},{"version":3,"sources":["/Users/kiyoungtack/Desktop/boiler/src/controllers/marketController.ts"],"names":["db","upload","fs","create","ctx","title","context","tags","price","request","body","author","state","user","_id","users","findOneAndUpdate","$inc","exp","save","newtag","JSON","parse","item","markets","files","pic","forEach","path","i","param","Bucket","Key","ACL","Body","createReadStream","ContentType","lala","pics","push","Location","status","update","id","params","post","findone","findOne","populate","viewUp","search","query","find","$text","$search","latest","posts","sort","limit","deleteone","findOneAndRemove"],"mappings":"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","sourcesContent":["import db from 'db';\nimport { Controller } from './types';\nimport upload from '../utils/s3';\nimport fs from 'fs';\n\nconst create: Controller = async (ctx) => {\n  const { title, context, tags, price } = ctx.request.body;\n  const author = ctx.state.user._id;\n  const user = await db.users.findOneAndUpdate(\n    { _id: author },\n    { $inc: { exp: +10 } }\n  );\n  user?.save();\n  const newtag = JSON.parse(tags);\n  const item = await db.markets.create({\n    title,\n    context,\n    author,\n    tags: newtag,\n    price,\n  });\n\n  ctx.request.files.pic.forEach(\n    async ({ path }: { path: string }, i: number) => {\n      var param = {\n        Bucket: 'ridasprod',\n        Key: `marketimage/${item._id + i}`,\n        ACL: 'public-read',\n        Body: await fs.createReadStream(path),\n        ContentType: 'image/png',\n      };\n      const lala = await upload(param);\n      await (item as any).pics.push(lala.Location);\n      item.save();\n    }\n  );\n\n  ctx.status = 200;\n};\n\nconst update: Controller = async (ctx) => {\n  const { id } = ctx.params;\n  const { context, title, tags, price } = ctx.request.body;\n  const newtag = JSON.parse(tags);\n  const author = ctx.state.user._id;\n  const post = await db.markets.findOneAndUpdate(\n    { _id: id },\n    { context: context, tags: newtag, title: title, price: price }\n  );\n  ctx.status = 200;\n};\n\nconst findone: Controller = async (ctx) => {\n  const { id } = ctx.params;\n  const post = await db.markets.findOne({ _id: id }).populate('comments');\n  post?.viewUp();\n  ctx.status = 200;\n  ctx.body = post;\n};\n\nconst search: Controller = async (ctx) => {\n  const { query } = ctx.params;\n  const post = await db.markets.find({ $text: { $search: query } });\n  // const post2 = await db.posts.find({ title: { $in: query } });\n  ctx.status = 200;\n  ctx.body = post;\n};\n\nconst latest: Controller = async (ctx) => {\n  const posts = await db.markets\n    .find()\n    .populate('comments')\n    .sort({ _id: -1 })\n    .limit(20);\n  ctx.status = 200;\n  ctx.body = posts;\n};\n\nconst deleteone: Controller = async (ctx) => {\n  const { id } = ctx.params;\n  const post = await db.markets.findOneAndRemove({ _id: id });\n  ctx.status = 200;\n};\n\nexport default { create, deleteone, update, search, findone, latest };\n"]}]}